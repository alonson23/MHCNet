from seq_process import pad_seq
from Bio.PDB import Polypeptide

HEADER = "HEADER    IMMUNE SYSTEM - MHC TYPE I                           \nTITLE     COMPUTATIONAL MODELING     \nREMARK 777 MODEL GENERATED BY MHC-NET \n"
ATOM_LINE = "ATOM{}{}  {}{}{} {}{}{}{}{:.3f}{}{:.3f}{}{:.3f}  1.00{}{:.2f}           {}\n"
END_LINE = "END\n"


def matrix_to_pdb_bone(pdb_file, seq, coord_matrix):
    pdb_file.write(HEADER)
    # seq = pad_seq(seq)
    i = 1
    k = 1
    c = 0
    chains = ["A", "B", "C"]
    for aa in range(len(seq)):
        if seq[aa] == "$":
            c += 1
            continue
        if seq[aa] != "-":
            second_space = (4 - len(str(i))) * " "
            b_factor = 0.00
            sixth_space = (6 - len("{:.2f}".format(b_factor))) * " "

            backbone = ["N", "CA", "C", "O", "CB"]
            for j in range(len(backbone)):
                first_space = (7 - len(str( k))) * " "
                third_space = (12 - len("{:.3f}".format(coord_matrix[aa - c][3*j]))) * " "
                forth_space = (8 - len("{:.3f}".format(coord_matrix[aa - c][3*j+1]))) * " "
                fifth_space = (8 - len("{:.3f}".format(coord_matrix[aa - c][3*j+2]))) * " "
                if seq[aa] == "G" and backbone[j] == "CB":
                    continue
                else:
                    pdb_file.write(ATOM_LINE.format(first_space, k, backbone[j]," " * (4 - len(backbone[j])), Polypeptide.one_to_three(seq[aa]), chains[c], second_space, i, third_space, coord_matrix[aa - c][3*j],forth_space, coord_matrix[aa - c][3*j+1],fifth_space, coord_matrix[aa - c][3*j+2], sixth_space, b_factor, backbone[j][0]))
                    k += 1
            i += 1
    pdb_file.write(END_LINE)
    pdb_file.close()


def matrix_to_pdb_bone2(pdb_file, seq, coord_matrix):
    pdb_file.write(HEADER)
    i = 1
    k = 1
    c = 0
    chains = ["A", "B", "C"]
    for aa in range(len(seq)):
        if aa == 290:
            c = 1

        if aa == 400:
            c = 2

        if seq[aa] != "-":
            second_space = (4 - len(str(i))) * " "
            b_factor = 0.00
            sixth_space = (6 - len("{:.2f}".format(b_factor))) * " "

            backbone = ["N", "CA", "C", "O", "CB"]
            for j in range(len(backbone)):
                first_space = (7 - len(str( k))) * " "
                third_space = (12 - len("{:.3f}".format(coord_matrix[aa][3*j]))) * " "
                forth_space = (8 - len("{:.3f}".format(coord_matrix[aa][3*j+1]))) * " "
                fifth_space = (8 - len("{:.3f}".format(coord_matrix[aa][3*j+2]))) * " "
                if seq[aa] == "G" and backbone[j] == "CB":
                    continue
                else:
                    pdb_file.write(ATOM_LINE.format(first_space, k, backbone[j]," " * (4 - len(backbone[j])), Polypeptide.one_to_three(seq[aa]), chains[c], second_space, i, third_space, coord_matrix[aa][3*j],forth_space, coord_matrix[aa][3*j+1],fifth_space, coord_matrix[aa][3*j+2], sixth_space, b_factor, backbone[j][0]))
                    k += 1
            i += 1
    pdb_file.write(END_LINE)


